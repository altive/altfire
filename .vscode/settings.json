// Dart Recommended Settings: https://dartcode.org/docs/recommended-settings/
{
	// Specify a text file that compiles words to be excluded from spell check.
	"cSpell.customDictionaries": {
		"app-words": {
			"name": "app-words",
			"path": "${workspaceRoot}/.cspell/app-words.txt",
			"description": "Words specific to this application",
			"addWords": true,
			"scope": "workspace"
		},
		"flutter-words": {
			"name": "flutter-words",
			"path": "${workspaceRoot}/.cspell/flutter-words.txt",
			"description": "Flutter App Development Words",
			"addWords": true,
			"scope": "workspace"
		},
		"organization-words": {
			"name": "organization-words",
			"path": "${workspaceRoot}/.cspell/organization-words.txt",
			"description": "Organization Words",
			"addWords": true,
			"scope": "workspace"
		}
	},
	// Specify a file path that will not undergo spell check.
	"cSpell.ignorePaths": [
		"dart_defines",
		"firebase_options*.dart",
		"google-services.json",
		"node_modules",
		"package-lock.json",
		"vscode-extension",
		"*.gen.dart",
		"*.lock",
		"*.xcconfig",
		"**/fvm",
		"**/.pub-cache",
		".git/objects",
		".vscode",
		".vscode-insiders",
	],
	// ONLY GLOBAL: When reaching a Breakpoint, the debug view is automatically displayed.
	"debug.openDebug": "openOnDebugBreak",
	// Execute format on save if true.
	"editor.formatOnSave": true,
	// Execute format on the line entered if `true`.
	"editor.formatOnType": true,
	// Execute format when pasted if `true`.
	"editor.formatOnPaste": true,
	// Position of the character count where the vertical ruler is displayed. Multiple specifications possible.
	"editor.rulers": [
		80
	],
	// Display of whitespace characters.
	"editor.renderWhitespace": "all",
	// Display control characters if true.
	"editor.renderControlCharacters": true,
	// Display the minimap if true. Default: true.
	"editor.minimap.enabled": false,
	// Color brackets by pair if `true`.
	"editor.bracketPairColorization.enabled": true,
	// Enable bracket pair guide display if `true`.
	"editor.guides.bracketPairs": true,
	// Settings applicable only to Dart.
	"[dart]": {
		// Set to `false` to not hinder the Dart feature that highlights only precise references to selected variables.
		"editor.selectionHighlight": false,
		// Set to `false` to allow regular completion functionality even in "snippet mode".
		"editor.suggest.snippetsPreventQuickSuggestions": false,
		// `first`: Propose the topmost item, not the recently used one, during code completion.
		// `recentlyUsedByPrefix`: Filter the recently used items based on the preceding text.
		"editor.suggestSelection": "recentlyUsedByPrefix",
		// Even if the completion list is not displayed, pressing <TAB> will complete snippets like `for`.
		"editor.tabCompletion": "onlySnippets",
		// Disable the behavior where code completion suggests words during editing of comments or strings.
		"editor.wordBasedSuggestions": false,
		// Code actions executed upon file save.
		"editor.codeActionsOnSave": {
			// Insert a semicolon.
			"quickfix.insertSemicolon": "always",
			// Organize imports.
			"source.organizeImports": "always",
			// Add missing imports.
			"source.addMissingImports": "always",
			// Execute Dart fix.
			"source.fixAll": "always",
		},
	},
	// Regenerate the Localization file every time an arb file is saved.
	"dart.flutterGenerateLocalizationsOnSave": "all",
	// Specify the path to the Flutter SDK you are using.
	"dart.flutterSdkPath": ".fvm/flutter_sdk",
	// Specify the path to the Dart SDK you are using.
	"dart.sdkPath": ".fvm/flutter_sdk/bin/cache/dart-sdk",
	// Mark external packages as debuggable and enable stepping into them during debugging if `true`.
	"dart.debugExternalPackageLibraries": false,
	// Mark Dart SDK libraries as debuggable and enable stepping into them during debugging if `true`.
	"dart.debugSdkLibraries": false,
	// Enable experimental refactoring (that might be unfinished or unstable) if `true`.
	"dart.experimentalRefactors": true,
	// Display skipped tests in the test tree if `true`.
	"dart.showSkippedTests": false,
	// Run `pub get` every time pubspec.yaml is saved if set to `always`.
	"dart.runPubGetOnPubspecChanges": "always",
	// When the class name is changed, the file name is also automatically changed. Options: always, prompt, never.
	"dart.renameFilesWithClasses": "always",
	// Ask for confirmation when dragging and dropping files or folders in the Explorer if `true`.
	"explorer.confirmDragAndDrop": false,
	// Group and nest display files on the Explorer.
	"explorer.fileNesting.enabled": true,
	"explorer.fileNesting.expand": false,
	"explorer.fileNesting.patterns": {
		"pubspec.yaml": ".flutter-plugins, .packages, .dart_tool, .flutter-plugins-dependencies, .metadata, template.iml, pubspec.lock, lefthook.yaml, pubspec_overrides.yaml",
		"firebase.json": ".firebaserc, firestore.rules, firestore.indexes.json,storage.rules, remoteconfig.template.json",
		".env.sample": ".env*",
		".gitignore": ".gitattributes, .gitmodules, .gitmessage, .mailmap, .git-blame*",
		"readme.*": "authors, backers.md, changelog*, citation*, code_of_conduct.md, codeowners, contributing.md, contributors, copying, credits, governance.md, history.md, license*, maintainers, readme*, security.md, sponsors.md",
		"*.dart": "$(capture).g.dart, $(capture).freezed.dart, $(capture).mocks.dart"
	},
	// Exclude specified files from monitoring.
	"files.watcherExclude": {
		"**/.fvm": true
	},
	// Fetch commits automatically from the default remote of the current Git repository if `true`.
	// When set to `all`, fetch from all remotes.
	"git.autofetch": true,
	// Commit all changes when there are no staged changes if `true`.
	"git.enableSmartCommit": true,
	// Exclude generated files from the search targets.
	"search.exclude": {
		"**/.fvm": true,
		"**/*.freezed.dart": true,
		"**/*.g.dart": true
	}
}